
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const fs = require('fs');
const { strict } = require('assert');

const SPREADSHEET_ID = '1vucTAdf8cSq5FisJWuWxt4nXdjRTinPQZYd8ZQ8g1rE'

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
// const serviceAccountAuth = new JWT({
//   // env var values here are copied from service account credentials generated by google
//   // see "Authentication" section in docs for more info
//   // 647814784722-compute@developer.gserviceaccount.com
//   // 
//   email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//   key: process.env.GOOGLE_PRIVATE_KEY,
//   scopes: [
//     'https://www.googleapis.com/auth/spreadsheets',
//   ],
// });



const account = JSON.parse(fs.readFileSync('ssh-vpn.json'));

const serviceAccountAuth = new JWT({
  email: account.client_email,
  key: account.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});


const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);

doc.loadInfo().then(() => {
  console.log(doc.title);
});


// await doc.updateProperties({ title: 'renamed doc' });

// const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
// console.log(sheet.title);
// console.log(sheet.rowCount);

// // adding / removing sheets
// const newSheet = await doc.addSheet({ title: 'another sheet' });
// await newSheet.delete();

const main = async () => {

    const sheet = doc.sheetsByIndex[0];
    const rows = await sheet.getRows(); // can pass in { limit, offset }
    console.log(rows[0].name);
    console.log(rows[0].email);
    console.log(rows[0].message);
    console.log(rows[0].date);
    console.log(rows[0].time);
}
